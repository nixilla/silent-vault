#!/usr/bin/env bash

VERSION="0.1"

if [ -e $HOME/.vault.config ]; then
    source $HOME/.vault.config;
else
    printf "\e[33mIt looks like the Silent Vault has not been initialized yet.\n"
    printf "Configuration file is missing, please initialize it with -i\e[0m\n"
fi

declare -a options=("SV_MAIN_FOLDER" "SV_GPG_KEY_ID" "SV_BACKUP_FOLDERS")

usage="$(basename "$0") [-h] [-v] [-i] [-o] [-c] [-a]

where:
    -h    show this help text
    -a    about this script
    -v    verify existing configuration
    -i    initialize configuration
    -o    opens Vault (requires PGP key password)
    -c    closes Vault, locks and makes a backup (if backup is configured)"

function about {

cat << EOM

Silent Vault - Encrypted Backup Script (version $VERSION)
https://github.com/nixilla/silent-vault

Small bash script which automates creation and maintainance of the secure local folder,
where you can keep your sensitive information, like cryptocurrency wallets, secret files, etc.

It uses your GPG keys for encryption and signing and can be configured to use Dropbox
and/or other cloud storage provider for backups.

More information can be found at https://github.com/nixilla/silent-vault/blob/master/README.md
EOM
}

function verify {

    DONE=1

    echo "Verifying current configuration ..."

    if type gpg &> /dev/null; then
        printf "gpg available, \e[95m`gpg --version | head -1 | tail -1`\e[0m\n"
    else
        printf "\e[31mgpg not available\e[0m, please install GPG and generate (or import) a key, otherwise this software will not work\n"
        DONE=0
    fi

    for i in "${options[@]}"
    do
        if [ ${!i} ]; then
	        printf "$i = \e[95m${!i}\e[0m\n"
        else
            DONE=0
            printf "$i \e[31mhas not been set\e[0m\n"
        fi
    done

    if [ $DONE == 0 ]; then
        printf "\nThe script is not configured, please initialize it with -i \n\n"
        printf "\e[31mverification failed\e[0m\n"
    fi
}

function init {
    echo "Initializing new configuration ..."

    if [ "$SV_MAIN_FOLDER" == "" ]; then
        SV_MAIN_FOLDER=$HOME/Vault
    fi

    printf "Where would you like to keep your files in decrypted form (default \"\e[95m$SV_MAIN_FOLDER\e[0m\")":

    read SV_MAIN_FOLDER_TMP

    if [ "$SV_MAIN_FOLDER_TMP" != "" ]; then
        SV_MAIN_FOLDER = $SV_MAIN_FOLDER_TMP;
    fi

    gpg --list-keys --keyid-format long
    printf "Please copy and paste one of the following public keys as the answer:\n"
    gpg --list-keys --with-colons | awk -F: '/^pub:/ { print $5 }'
    printf "Which GPG key would you like to use for encryption (\"default: \e[95m$SV_GPG_KEY_ID\e[0m\"): "

    read SV_GPG_KEY_ID_TMP

    if [ "$SV_GPG_KEY_ID_TMP" != "" ]; then
        SV_GPG_KEY_ID = $SV_GPG_KEY_ID_TMP
    fi

    while true; do
        printf "Please folder location where you would like to backup encrypted vault: "
        read FLD

        if [ "$FLD" == "" ]; then
            break;
        fi

        SV_BACKUP_FOLDERS=$SV_BACKUP_FOLDERS,$FLD

    done

    printf "\n\nYour main folder is set to \e[95m$SV_MAIN_FOLDER\e[0m\n"
    printf "Your GPG public key is set to \e[95m$SV_GPG_KEY_ID\e[0m\n"
    printf "Your backup folder are set to \e[95m$SV_BACKUP_FOLDERS\e[0m\n"

    echo -e "Saving ..."
cat << EOM > $HOME/.vault.config
# this file is generated by vault script
export SV_MAIN_FOLDER="$SV_MAIN_FOLDER"
export SV_GPG_KEY_ID="$SV_GPG_KEY_ID"
export SV_BACKUP_FOLDERS="$SV_BACKUP_FOLDERS"
EOM
    echo "OK"
}

function open {
    echo "Opening the Vault ..."
}

function close {
    echo "Closing the Vault ..."
}

while getopts ':chivoa' option; do
  case "$option" in
    h) echo "$usage"
       exit
       ;;
    a) about
       exit
       ;;
    v) verify
       exit
       ;;
    i) init
       exit
       ;;
    o) open
       exit
       ;;
    c) close
       exit
       ;;
    \?) printf "Unrecognized option: -%s\n" "$OPTARG,  please use following options:"
       echo "$usage"
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))

